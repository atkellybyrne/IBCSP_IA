package sample;

import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.scene.control.*;
import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.text.ParseException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class EnterInfo {

    public EnterInfo(Stage infoStage, Scene infoScene, BorderPane infoBorder, String profName, ArrayList userStr) throws ParseException {
        infoStage.setScene(infoScene);
        infoStage.setTitle("Enter Information"+ " (" + profName + ")");

        GridPane infoGrid = new GridPane();
        infoGrid.setHgap(5);
        infoGrid.setVgap(5);

        Button goBack = new Button("Back to Main Menu");
        Button submitInfo = new Button("Enter Information");

        Label heightLabel = new Label("Height");
        Label weightLabel = new Label("Weight");
        Label exerciseLabel = new Label("Amount of Exercise:");
        Label caloriesLabel = new Label("Calories:");
        Label dateLabel = new Label("Date:");
        Label errorLabel = new Label("");
        errorLabel.setTextFill(Color.web("FF0000"));
        errorLabel.setVisible(false);

        TextField heightText = new TextField();
        heightText.setPromptText("Enter Height (inches)");
        TextField weightText = new TextField();
        weightText.setPromptText("Enter Weight (pounds)");
        TextField exerciseText = new TextField();
        exerciseText.setPromptText("Enter Exercise (hrs)");
        TextField caloriesText = new TextField();
        caloriesText.setPromptText("Enter Calories Consumed");
        DatePicker date = new DatePicker();
        date.setPromptText("Enter Date");

        infoBorder.setLeft(infoGrid);
        infoGrid.setAlignment(Pos.TOP_LEFT);

        infoGrid.add(heightLabel,0,0);
        infoGrid.add(weightLabel,0,1);
        infoGrid.add(exerciseLabel,0,2);
        infoGrid.add(caloriesLabel,0,3);
        infoGrid.add(heightText,1,0);
        infoGrid.add(weightText,1,1);
        infoGrid.add(exerciseText,1,2);
        infoGrid.add(caloriesText,1,3);
        infoGrid.add(dateLabel,0,4);
        infoGrid.add(date,1,4);
        infoGrid.add(errorLabel,0,5);
        infoGrid.add(submitInfo,0,6);
        infoGrid.add(goBack,1,6);

        ArrayList<String> infoList = new ArrayList<String>();
        ArrayList<String> dateList = new ArrayList<String>();

        try {
            Scanner sd = new Scanner(new File(profName + "Date.txt"));

            while (sd.hasNext()) {
                dateList.add(sd.next());
            }
        } catch (Exception e1) {
            System.out.println("error in scanning from .txt file to arrayList");
        }

        submitInfo.setOnAction(event ->
        {

            LocalDate lastDate = null;
            LocalDate newDate = null;

            if(dateList.isEmpty())
            {

                lastDate = java.time.LocalDate.now();
            }

            else
            {
                lastDate = LocalDate.parse(dateList.get(dateList.size() - 1));
            }

            newDate = LocalDate.parse(String.valueOf(date.getValue()));




            if(newDate.isBefore(lastDate))
            {
                errorLabel.setVisible(true);
                errorLabel.setText("Enter a date after " + lastDate);
            }

            else if(heightText.getText().equals("") || weightText.getText().equals("") ||
                    exerciseText.getText().equals("") ||caloriesText.getText().equals("") || date.getValue().equals(""))
            {
                errorLabel.setVisible(true);
                errorLabel.setText("Please enter in every field");
            }

            else
            {
                errorLabel.setVisible(false);
                try {
                    Writer wHeight = new FileWriter(profName+ "Height.txt", true);
                    Writer wWeight = new FileWriter(profName+ "Weight.txt", true);
                    Writer wExercise = new FileWriter(profName+ "Exercise.txt", true);
                    Writer wCalories = new FileWriter(profName+ "Calories.txt", true);
                    Writer wDate = new FileWriter(profName+ "Date.txt", true);

                    wHeight.write("\n");
                    wHeight.write(heightText.getText());

                    wWeight.write("\n");
                    wWeight.write(weightText.getText());

                    wExercise.write("\n");
                    wExercise.write(exerciseText.getText());

                    wCalories.write("\n");
                    wCalories.write(caloriesText.getText());

                    wDate.write("\n");
                    wDate.write(date.getValue().toString());

                    wExercise.write("\n");
                    wExercise.write(exerciseText.getText());

                    wHeight.close();
                    wWeight.close();
                    wExercise.close();
                    wCalories.close();
                    wDate.close();


                    Scanner sHeight = new Scanner(new File(profName+ "Height.txt"));
                    Scanner sWeight = new Scanner(new File(profName+ "Weight.txt"));
                    Scanner sExercise = new Scanner(new File(profName+ "Exercise.txt"));
                    Scanner sCalories = new Scanner(new File(profName+ "Calories.txt"));
                    Scanner sDate = new Scanner(new File(profName+ "Date.txt"));

                    while (sHeight.hasNext()) {
                        infoList.add(sHeight.next());
                    }
                    while (sWeight.hasNext()) {
                        infoList.add(sWeight.next());
                    }
                    while (sExercise.hasNext()) {
                        infoList.add(sExercise.next());
                    }
                    while (sCalories.hasNext()) {
                        infoList.add(sCalories.next());
                    }
                    while (sDate.hasNext()) {
                        infoList.add(sDate.next());
                    }

                } catch (Exception e1) {
                    System.out.println("error in writing or reading into arraylist");
                }

                heightText.setText("");
                weightText.setText("");
                exerciseText.setText("");
                caloriesText.setText("");
                date.setValue(null);
            }

        });

        goBack.setOnAction(event ->
        {
            new MainMenu(infoStage, profName, userStr);
        });

    }
}
