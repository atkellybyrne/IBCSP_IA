package sample;

import javafx.scene.Scene;
import javafx.scene.chart.*;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

public class Graph{

    public Graph(Stage graphStage, Scene graphScene, BorderPane gBorder, String profName, ArrayList userStr)
    {
        // Creates a new Stage and scene and sets the Title
        graphStage.setScene(graphScene);
        graphStage.setTitle("Graph" + " (" + profName + ")");

        // Makes two new GridPanes and sets them to the BorderPane gBorder
        GridPane cGrid = new GridPane();
        GridPane bGrid = new GridPane();
        gBorder.setCenter(cGrid);
        gBorder.setBottom(bGrid);

        // Makes ArrayLists for each category of information
        ArrayList<String> dateList = new ArrayList<String>();
        ArrayList<String> weightList = new ArrayList<String>();
        ArrayList<String> heightList = new ArrayList<String>();
        ArrayList<String> calList = new ArrayList<String>();
        ArrayList<String> exerciseList = new ArrayList<String>();

        // Makes a button to go back to the Main Menu and adds
        // it to the grid at the bottom
        Button goBack = new Button("Back to Main Menu");
        bGrid.add(goBack,0,0);

        // Reads from .txt files depending on the information given ands
        // adds them to their respective ArrayLists
        try {
            Scanner sd = new Scanner(new File(profName + "Date.txt"));
            Scanner sw = new Scanner(new File(profName + "Weight.txt"));
            Scanner sh = new Scanner(new File(profName + "Height.txt"));
            Scanner sc = new Scanner(new File(profName + "Calories.txt"));
            Scanner se = new Scanner(new File(profName + "Exercise.txt"));

            while (sd.hasNext()) {
                dateList.add(sd.next());

            }
            while (sw.hasNext()) {
                weightList.add(sw.next());
            }
            while (sh.hasNext()) {
                heightList.add(sh.next());
            }
            while (sc.hasNext()) {
                calList.add(sc.next());
            }
            while (se.hasNext()) {
                exerciseList.add(se.next());
            }

        } catch (Exception e1) {
            System.out.println("error in scanning from .txt file to arrayList");
        }

        // Creates CategoryAxis' which take in Strings for the x-axis as the date
        final CategoryAxis xAxis1 = new CategoryAxis();
        xAxis1.setLabel("Date");
        final CategoryAxis xAxis2 = new CategoryAxis();
        xAxis2.setLabel("Date");
        final CategoryAxis xAxis3 = new CategoryAxis();
        xAxis3.setLabel("Date");
        final CategoryAxis xAxis4 = new CategoryAxis();
        xAxis4.setLabel("Date");

        // Creates y-axis' from Axis and sets them to the different categories
        // of information
        Axis yAxis1 = new NumberAxis(0,300,5);
        yAxis1.setLabel("Weight");
        Axis yAxis2 = new NumberAxis(0,100,5);
        yAxis2.setLabel("Height");
        Axis yAxis3 = new NumberAxis(0,4000,100);
        yAxis3.setLabel("Calories");
        Axis yAxis4 = new NumberAxis(0,7,1);
        yAxis4.setLabel("Exercise");

        // Creates a LineChart for each category, adds the different axis' into them
        LineChart<String,Double> chart1 =
                new LineChart<String,Double>(xAxis1,yAxis1);
        LineChart<String,Double> chart2 =
                new LineChart<String,Double>(xAxis2,yAxis2);
        LineChart<String,Double> chart3 =
                new LineChart<String,Double>(xAxis3,yAxis3);
        LineChart<String,Double> chart4 =
                new LineChart<String,Double>(xAxis4,yAxis4);

        // Creates the series for the different categories
        XYChart.Series wSeries = new XYChart.Series();
        XYChart.Series hSeries = new XYChart.Series();
        XYChart.Series cSeries = new XYChart.Series();
        XYChart.Series eSeries = new XYChart.Series();

        // Loops through the size of the ArrayList dateList and adds the date
        // for the x coordinate, and adds the category of information for the y-axis.
        // Adds everything in each ArrayList into the series
        for(int i =0; i <dateList.size(); i++)
        {
            wSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(weightList.get(i))));
            hSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(heightList.get(i))));
            cSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(calList.get(i))));
            eSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(exerciseList.get(i))));
        }

        // Makes the chart from the 4 different series'
        chart1.getData().add(wSeries);
        wSeries.setName("Date vs Weight");
        chart2.getData().add(hSeries);
        hSeries.setName("Date vs Height");
        chart3.getData().add(cSeries);
        cSeries.setName("Date vs Calories");
        chart4.getData().add(eSeries);
        eSeries.setName("Date vs Exercise");

        // Adds the charts to the grid to display
        cGrid.add(chart1,0,0);
        cGrid.add(chart2,0,1);
        cGrid.add(chart3,1,0);
        cGrid.add(chart4,1,1);

        // When the user presses the goBack button, it goes back to the MainMenu
        goBack.setOnAction(event ->
        {
            new MainMenu(graphStage, profName, userStr);
        });

    }

    // This is an overloaded constructor for Graph. When the user presses the account from
    // the OtherAccount class, this Graph() method will add graphs for any user. This was used
    // because there would be an extra goBack button. The user would also be able to log-into
    // someone else's account from a button as well. To avoid this, an overloaded constructor was used
    public Graph(Stage graphStage, Scene graphScene, BorderPane gBorder, String profName) {
        // Creates a new Stage and scene and sets the Title
        graphStage.setScene(graphScene);
        graphStage.setTitle("Graph" + " (" + profName + ")");

        // Makes two new GridPanes and sets them to the BorderPane gBorder
        GridPane cGrid = new GridPane();
        GridPane bGrid = new GridPane();
        gBorder.setCenter(cGrid);
        gBorder.setBottom(bGrid);

        // Makes ArrayLists for each category of information
        ArrayList<String> dateList = new ArrayList<String>();
        ArrayList<String> weightList = new ArrayList<String>();
        ArrayList<String> heightList = new ArrayList<String>();
        ArrayList<String> calList = new ArrayList<String>();
        ArrayList<String> exerciseList = new ArrayList<String>();

        // Makes a button to go back to the Main Menu and adds
        // it to the grid at the bottom
        Button goBack = new Button("Back to Main Menu");
        bGrid.add(goBack,0,0);

        // Reads from .txt files depending on the information given ands
        // adds them to their respective ArrayLists
        try {
            Scanner sd = new Scanner(new File(profName + "Date.txt"));
            Scanner sw = new Scanner(new File(profName + "Weight.txt"));
            Scanner sh = new Scanner(new File(profName + "Height.txt"));
            Scanner sc = new Scanner(new File(profName + "Calories.txt"));
            Scanner se = new Scanner(new File(profName + "Exercise.txt"));

            while (sd.hasNext()) {
                dateList.add(sd.next());

            }
            while (sw.hasNext()) {
                weightList.add(sw.next());
            }
            while (sh.hasNext()) {
                heightList.add(sh.next());
            }
            while (sc.hasNext()) {
                calList.add(sc.next());
            }
            while (se.hasNext()) {
                exerciseList.add(se.next());
            }

        } catch (Exception e1) {
            System.out.println("error in scanning from .txt file to arrayList");
        }

        // Creates CategoryAxis' which take in Strings for the x-axis as the date
        final CategoryAxis xAxis1 = new CategoryAxis();
        xAxis1.setLabel("Date");
        final CategoryAxis xAxis2 = new CategoryAxis();
        xAxis2.setLabel("Date");
        final CategoryAxis xAxis3 = new CategoryAxis();
        xAxis3.setLabel("Date");
        final CategoryAxis xAxis4 = new CategoryAxis();
        xAxis4.setLabel("Date");

        // Creates y-axis' from Axis and sets them to the different categories
        // of information
        Axis yAxis1 = new NumberAxis(0,300,5);
        yAxis1.setLabel("Weight");
        Axis yAxis2 = new NumberAxis(0,100,5);
        yAxis2.setLabel("Height");
        Axis yAxis3 = new NumberAxis(0,4000,100);
        yAxis3.setLabel("Calories");
        Axis yAxis4 = new NumberAxis(0,7,1);
        yAxis4.setLabel("Exercise");

        // Creates a LineChart for each category, adds the different axis' into them
        LineChart<String,Double> chart1 =
                new LineChart<String,Double>(xAxis1,yAxis1);
        LineChart<String,Double> chart2 =
                new LineChart<String,Double>(xAxis2,yAxis2);
        LineChart<String,Double> chart3 =
                new LineChart<String,Double>(xAxis3,yAxis3);
        LineChart<String,Double> chart4 =
                new LineChart<String,Double>(xAxis4,yAxis4);

        // Creates the series for the different categories
        XYChart.Series wSeries = new XYChart.Series();
        XYChart.Series hSeries = new XYChart.Series();
        XYChart.Series cSeries = new XYChart.Series();
        XYChart.Series eSeries = new XYChart.Series();

        // Loops through the size of the ArrayList dateList and adds the date
        // for the x coordinate, and adds the category of information for the y-axis.
        // Adds everything in each ArrayList into the series
        for(int i =0; i <dateList.size(); i++)
        {
            wSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(weightList.get(i))));
            hSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(heightList.get(i))));
            cSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(calList.get(i))));
            eSeries.getData().add(new XYChart.Data(dateList.get(i),Double.parseDouble(exerciseList.get(i))));
        }

        // Makes the chart from the 4 different series'
        chart1.getData().add(wSeries);
        wSeries.setName("Date vs Weight");
        chart2.getData().add(hSeries);
        hSeries.setName("Date vs Height");
        chart3.getData().add(cSeries);
        cSeries.setName("Date vs Calories");
        chart4.getData().add(eSeries);
        eSeries.setName("Date vs Exercise");

        // Adds the charts to the grid to display
        cGrid.add(chart1,0,0);
        cGrid.add(chart2,0,1);
        cGrid.add(chart3,1,0);
        cGrid.add(chart4,1,1);
    }
}
